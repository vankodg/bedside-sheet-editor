{"version":3,"sources":["components/settings/GroupLabelList.tsx","components/settings/InputList.tsx","components/SettingContainer.tsx","utils/constants.tsx","components/svg/Cell.tsx","components/svg/Column.tsx","components/svg/Row.tsx","components/SvgContainer.tsx","utils/myHooks.tsx","App.tsx","index.js"],"names":["GroupLabelList","props","isActive","groupLabelList","setGroupLabelList","Group","direction","style","alignItems","Text","Array","length","map","_","rowIdx","Grid","grow","Col","span","TextInput","placeholder","value","label","onChange","event","newArray","currentTarget","disabled","NumberInput","startRow","hideControls","endRow","ActionIcon","onClick","splice","Button","leftIcon","size","InputList","numOfRows","firstColLabelList","setFirstColLabelList","SettingContainer","justify","align","height","width","overflowY","margin","marginBottom","id","min","max","type","Number","isInteger","setNumOfRows","Checkbox","mt","mb","checked","isFirstRow","setIsFirstRow","isFirstCol","setIsFirstCol","Tooltip","color","position","withArrow","display","isMidIndex","setIsMidIndex","isEndIndex","setIsEndIndex","downloadPng","preventDefault","downloadConfig","rowHeight","rowWidth","firstColWidth","Cell","isLabelCentered","transform","svgProps","fill","stroke","x","y","dx","dy","font","dominantBaseline","textAnchor","Column","cellHeight","numOfCells","labelList","undefined","Row","cellWidth","colIdx","isLabelsCentered","SvgContainer","svgWidth","svgHeight","xmlns","viewBox","item","substring","useLocalStorage","key","initialValue","useState","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","saveSvgAsPng","require","App","configDownloadUrl","setConfigDownloadUrl","dofileDownload","useRef","useEffect","current","click","URL","revokeObjectURL","Container","document","getElementById","output","blob","Blob","url","createObjectURL","toString","download","href","ref","ReactDOM","render"],"mappings":"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","file":"static/js/main.19c90c9e.chunk.js","sourcesContent":["import {\n  Group,\n  TextInput,\n  Text,\n  NumberInput,\n  Grid,\n  Col,\n  ActionIcon,\n  Button,\n} from '@mantine/core';\nimport { IconTrash, IconPlus } from '@tabler/icons';\nimport { GroupLabel } from '../../utils/types';\n\ntype GroupLabelListProps = {\n  isActive: boolean;\n  groupLabelList: GroupLabel[];\n  setGroupLabelList: (x: GroupLabel[]) => void;\n};\n\nexport default function GroupLabelList(props: GroupLabelListProps) {\n  var { isActive, groupLabelList, setGroupLabelList } = props;\n  return (\n    <Group direction=\"column\" style={{ alignItems: 'normal' }}>\n      <Text>Group labels of the first column</Text>\n      {[...Array(groupLabelList.length)].map((_, rowIdx) => (\n        <Grid key={rowIdx} grow>\n          <Col span={6}>\n            <TextInput\n              placeholder={'Label of group ' + (rowIdx + 1)}\n              value={groupLabelList[rowIdx].label || ''}\n              onChange={(event) => {\n                let newArray: GroupLabel[] = [...groupLabelList];\n                newArray[rowIdx].label = event.currentTarget.value;\n                setGroupLabelList(newArray);\n              }}\n              disabled={!isActive}\n            />\n          </Col>\n          <Col span={2}>\n            <NumberInput\n              value={groupLabelList[rowIdx].startRow}\n              onChange={(value) => {\n                let newArray: GroupLabel[] = [...groupLabelList];\n                newArray[rowIdx].startRow = value;\n                setGroupLabelList(newArray);\n              }}\n              hideControls\n              disabled={!isActive}\n            />\n          </Col>\n          <Col span={2}>\n            <NumberInput\n              value={groupLabelList[rowIdx].endRow}\n              onChange={(value) => {\n                let newArray: GroupLabel[] = [...groupLabelList];\n                newArray[rowIdx].endRow = value;\n                setGroupLabelList(newArray);\n              }}\n              hideControls\n              disabled={!isActive}\n            />\n          </Col>\n          <Col span={1}>\n            <ActionIcon\n              onClick={() => {\n                let newArray: GroupLabel[] = [...groupLabelList];\n                newArray.splice(rowIdx, 1);\n                setGroupLabelList(newArray);\n              }}\n              disabled={!isActive}\n            >\n              <IconTrash />\n            </ActionIcon>\n          </Col>\n        </Grid>\n      ))}\n      <Button\n        leftIcon={<IconPlus size={26} />}\n        onClick={() => {\n          let newArray: GroupLabel[] = [\n            ...groupLabelList,\n            { label: '', startRow: 0, endRow: 0 },\n          ];\n          setGroupLabelList(newArray);\n        }}\n        disabled={!isActive}\n      >\n        Add new group label\n      </Button>\n    </Group>\n  );\n}\n","import { Group, TextInput, Text } from '@mantine/core';\n\ntype InputListProps = {\n  isActive: boolean;\n  numOfRows: number;\n  firstColLabelList: string[];\n  setFirstColLabelList: (x: string[]) => void;\n};\n\nexport default function InputList(props: InputListProps) {\n  return (\n    <Group direction=\"column\" style={{ alignItems: 'normal' }}>\n      <Text>Labels in the first column</Text>\n      {[...Array(props.numOfRows)].map((_, rowIdx) => (\n        <TextInput\n          key={rowIdx}\n          placeholder={'Label of row ' + (rowIdx + 1)}\n          value={props.firstColLabelList[rowIdx] || ''}\n          onChange={(event) => {\n            let newArray = [...props.firstColLabelList];\n            newArray[rowIdx] = event.currentTarget.value;\n            props.setFirstColLabelList(newArray);\n          }}\n          disabled={!props.isActive}\n        />\n      ))}\n    </Group>\n  );\n}\n","import {\n  Button,\n  Checkbox,\n  Col,\n  Grid,\n  NumberInput,\n  Group,\n  Tooltip,\n} from '@mantine/core';\nimport { GroupLabel } from '../utils/types';\nimport GroupLabelList from './settings/GroupLabelList';\nimport InputList from './settings/InputList';\n\ntype MyProps = {\n  numOfRows: number;\n  setNumOfRows: (x: number) => void;\n  isFirstRow: boolean;\n  setIsFirstRow: (x: boolean) => void;\n  isFirstCol: boolean;\n  setIsFirstCol: (x: boolean) => void;\n  firstColLabelList: string[];\n  setFirstColLabelList: (x: string[]) => void;\n  isMidIndex: boolean;\n  setIsMidIndex: (x: boolean) => void;\n  isEndIndex: boolean;\n  setIsEndIndex: (x: boolean) => void;\n  groupLabelList: GroupLabel[];\n  setGroupLabelList: (x: GroupLabel[]) => void;\n  downloadPng: () => void;\n  downloadConfig: () => void;\n};\n\nexport default function SettingContainer(props: MyProps) {\n  return (\n    <Group>\n      <Grid\n        justify=\"space-between\"\n        align=\"flex-start\"\n        grow\n        style={{\n          height: '67vh',\n          width: 'calc(100% - 180px)',\n          overflowY: 'scroll',\n          margin: 0,\n          marginBottom: 16,\n        }}\n      >\n        <Col span={3}>\n          <NumberInput\n            label=\"Number of rows\"\n            id={'numOfRows'}\n            min={1}\n            max={100} /* just to be safe */\n            type={'number'}\n            value={props.numOfRows}\n            onChange={(value) => {\n              if (Number.isInteger(value) && 0 <= value && value <= 100) {\n                props.setNumOfRows(value);\n              }\n            }}\n          />\n          <Checkbox\n            mt=\"xs\"\n            mb=\"md\"\n            checked={props.isFirstRow}\n            onChange={(event) =>\n              props.setIsFirstRow(event.currentTarget.checked)\n            }\n            label=\"First row with hours\"\n          />\n        </Col>\n        <Col span={3}>\n          <Checkbox\n            mb=\"xs\"\n            checked={props.isFirstCol}\n            onChange={(event) =>\n              props.setIsFirstCol(event.currentTarget.checked)\n            }\n            label=\"First column\"\n          />\n          <Tooltip\n            label=\"Shows the first 5 characters of the column label in the middle column\"\n            color=\"primary\"\n            position=\"right\"\n            withArrow\n            style={{ display: 'flex' }}\n          >\n            <Checkbox\n              mb=\"xs\"\n              checked={props.isMidIndex}\n              onChange={(event) =>\n                props.setIsMidIndex(event.currentTarget.checked)\n              }\n              label=\"Mid-row indexes\"\n            />\n          </Tooltip>\n          <Tooltip\n            label=\"Shows the first 5 characters of the column label in the last column\"\n            color=\"primary\"\n            position=\"right\"\n            withArrow\n            style={{ display: 'flex' }}\n          >\n            <Checkbox\n              mb=\"xs\"\n              checked={props.isEndIndex}\n              onChange={(event) =>\n                props.setIsEndIndex(event.currentTarget.checked)\n              }\n              label=\"Row-end indexes\"\n            />\n          </Tooltip>\n          <InputList\n            isActive={props.isFirstCol}\n            numOfRows={props.numOfRows}\n            firstColLabelList={props.firstColLabelList}\n            setFirstColLabelList={props.setFirstColLabelList}\n          />\n        </Col>\n        <Col span={5}>\n          <GroupLabelList\n            isActive={props.isFirstCol}\n            groupLabelList={props.groupLabelList}\n            setGroupLabelList={props.setGroupLabelList}\n          />\n        </Col>\n      </Grid>\n      <Group direction=\"column\" position=\"center\">\n        <Button onClick={() => props.downloadPng()}>Download PNG</Button>\n        <Button\n          onClick={(event: any): void => {\n            event.preventDefault();\n            props.downloadConfig();\n          }}\n        >\n          Download config\n        </Button>\n      </Group>\n    </Group>\n  );\n}\n","export const rowHeight = 32;\nexport const rowWidth = 1800;\nexport const firstColWidth = 200;\n","import { SVGProps } from 'react';\n\ntype MyProps = {\n  label?: string;\n  isLabelCentered?: boolean;\n  transform?: string;\n} & SVGProps<SVGRectElement>;\n\nexport default function Cell(props: MyProps) {\n  var { label, isLabelCentered, transform, ...svgProps } = props;\n  return (\n    <g transform={transform ? transform : ''}>\n      <rect style={{ fill: 'white', stroke: 'black' }} {...svgProps} />\n      {props.label && !props.isLabelCentered && (\n        <text\n          x={props.x}\n          y={props.y}\n          dx={Number(props.width) * 0.05}\n          dy={Number(props.height) * 0.85}\n          style={{\n            font: 'normal ' + Number(props.height) * 0.8 + 'px sans-serif',\n          }}\n        >\n          {props.label}\n        </text>\n      )}\n      {props.label && props.isLabelCentered && (\n        <text\n          x={Number(props.x) + (props.width ? Number(props.width) / 2 : 15)}\n          y={Number(props.y) + (props.height ? Number(props.height) / 2 : 8)}\n          dominantBaseline={'central'}\n          textAnchor={'middle'}\n          style={{\n            font: 'normal ' + Number(props.height) * 0.8 + 'px sans-serif',\n          }}\n        >\n          {props.label}\n        </text>\n      )}\n    </g>\n  );\n}\n","import Cell from './Cell';\n\ntype MyProps = {\n  numOfCells: number;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  labelList?: string[];\n};\n\nexport default function Column(props: MyProps) {\n  let cellHeight = props.height / props.numOfCells;\n  return (\n    <g transform={'translate(' + props.x + ' ' + props.y + ')'}>\n      {[...Array(props.numOfCells)].map((_, rowIdx) => (\n        <Cell\n          key={rowIdx}\n          x={0}\n          y={rowIdx * cellHeight}\n          width={props.width}\n          height={cellHeight}\n          label={props.labelList ? props.labelList[rowIdx] : undefined}\n        />\n      ))}\n    </g>\n  );\n}\n","import Cell from './Cell';\n\ntype MyProps = {\n  numOfCells: number;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  labelList?: string[];\n  isLabelsCentered?: boolean;\n};\n\nexport default function Row(props: MyProps) {\n  let cellWidth = props.width / props.numOfCells;\n  return (\n    <g transform={'translate(' + props.x + ' ' + props.y + ')'}>\n      {[...Array(props.numOfCells)].map((_, colIdx) => (\n        <Cell\n          key={colIdx}\n          x={colIdx * cellWidth}\n          y={0}\n          width={cellWidth}\n          height={props.height}\n          label={props.labelList ? props.labelList[colIdx] : undefined}\n          isLabelCentered={props.isLabelsCentered}\n        />\n      ))}\n    </g>\n  );\n}\n","import React from 'react';\nimport { firstColWidth, rowHeight, rowWidth } from '../utils/constants';\nimport { GroupLabel } from '../utils/types';\nimport Cell from './svg/Cell';\nimport Column from './svg/Column';\nimport Row from './svg/Row';\n\ntype MyProps = {\n  numOfRows: number;\n  isFirstRow: boolean;\n  isFirstCol: boolean;\n  firstColLabelList: string[];\n  isMidIndex: boolean;\n  isEndIndex: boolean;\n  groupLabelList: GroupLabel[];\n};\n\nexport default function SvgContainer(props: MyProps) {\n  let svgWidth =\n    rowWidth + (props.isFirstCol ? firstColWidth + rowHeight : 0) + 1;\n  let svgHeight =\n    ((props.isFirstRow ? 1 : 0) + props.numOfRows) * rowHeight + 1;\n  return (\n    <svg\n      id={'svg-bedsheet'}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={'0 0 ' + svgWidth + ' ' + svgHeight}\n    >\n      {props.isFirstCol &&\n        props.groupLabelList.map((item, rowIdx) => (\n          <Cell\n            key={rowIdx}\n            label={item.label}\n            x={-(item.endRow - item.startRow + 1) * rowHeight}\n            y={\n              (props.isFirstRow ? item.startRow : item.startRow - 1) * rowHeight\n            }\n            transform={\n              'rotate(-90 0 ' +\n              (props.isFirstRow ? item.startRow : item.startRow - 1) *\n                rowHeight +\n              ')'\n            }\n            height={rowHeight}\n            width={(item.endRow - item.startRow + 1) * rowHeight}\n            isLabelCentered\n          />\n        ))}\n      {props.isFirstCol && (\n        <Column\n          key={-2}\n          numOfCells={props.numOfRows}\n          x={rowHeight}\n          y={(props.isFirstRow ? 1 : 0) * rowHeight}\n          width={firstColWidth}\n          height={props.numOfRows * rowHeight}\n          labelList={props.firstColLabelList}\n        />\n      )}\n      {props.isFirstRow && (\n        <Row\n          key={-1}\n          numOfCells={24}\n          x={props.isFirstCol ? firstColWidth + rowHeight : 0}\n          y={0}\n          height={rowHeight}\n          width={rowWidth}\n          labelList={[\n            '07',\n            '08',\n            '09',\n            '10',\n            '11',\n            '12',\n            '13',\n            '14',\n            '15',\n            '16',\n            '17',\n            '18',\n            '19',\n            '20',\n            '21',\n            '22',\n            '23',\n            '24',\n            '01',\n            '02',\n            '03',\n            '04',\n            '05',\n            '06',\n          ]}\n          isLabelsCentered\n        />\n      )}\n      {[...Array(props.numOfRows)].map((x, rowIdx) => (\n        <g>\n          <Row\n            key={rowIdx}\n            numOfCells={24}\n            x={props.isFirstCol ? firstColWidth + rowHeight : 0}\n            y={((props.isFirstRow ? 1 : 0) + rowIdx) * rowHeight}\n            height={rowHeight}\n            width={rowWidth}\n          />\n          {props.isMidIndex && props.firstColLabelList[rowIdx] && (\n            <text\n              key={'mid'}\n              x={\n                (props.isFirstCol ? Number(firstColWidth + rowHeight) : 0) +\n                Number(rowWidth / 2)\n              }\n              dx={(-rowWidth * 0.05) / 24}\n              y={((props.isFirstRow ? 1 : 0) + rowIdx) * rowHeight}\n              dy={rowHeight * 0.01}\n              dominantBaseline={'hanging'}\n              textAnchor={'end'}\n              style={{\n                font: 'normal ' + rowHeight * 0.4 + 'px sans-serif',\n              }}\n            >\n              {props.firstColLabelList[rowIdx].substring(0, 5)}\n            </text>\n          )}\n          {props.isEndIndex && props.firstColLabelList[rowIdx] && (\n            <text\n              key={'end'}\n              x={\n                (props.isFirstCol ? Number(firstColWidth + rowHeight) : 0) +\n                Number(rowWidth)\n              }\n              dx={(-rowWidth * 0.05) / 24}\n              y={((props.isFirstRow ? 1 : 0) + rowIdx) * rowHeight}\n              dy={rowHeight * 0.01}\n              dominantBaseline={'hanging'}\n              textAnchor={'end'}\n              style={{\n                font: 'normal ' + rowHeight * 0.4 + 'px sans-serif',\n              }}\n            >\n              {props.firstColLabelList[rowIdx].substring(0, 5)}\n            </text>\n          )}\n        </g>\n      ))}\n    </svg>\n  );\n}\n","// source: https://usehooks.com/useLocalStorage/\nimport { useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import { Container } from '@mantine/core';\nimport React, { useEffect, useRef, useState } from 'react';\nimport SettingContainer from './components/SettingContainer';\nimport SvgContainer from './components/SvgContainer';\nimport { firstColWidth, rowHeight, rowWidth } from './utils/constants';\nimport { useLocalStorage } from './utils/myHooks';\nimport { GroupLabel } from './utils/types';\n\nconst saveSvgAsPng = require('save-svg-as-png');\n\nexport default function App() {\n  const [numOfRows, setNumOfRows] = useLocalStorage('numOfRows', 6);\n  const [isFirstRow, setIsFirstRow] = useLocalStorage('isFirstRow', false);\n  const [isFirstCol, setIsFirstCol] = useLocalStorage('isFirstCol', false);\n  const [firstColLabelList, setFirstColLabelList] = useLocalStorage<string[]>(\n    'firstColLabelList',\n    [],\n  );\n  const [isMidIndex, setIsMidIndex] = useLocalStorage('isMidIndex', false);\n  const [isEndIndex, setIsEndIndex] = useLocalStorage('isEndIndex', false);\n  const [groupLabelList, setGroupLabelList] = useLocalStorage<GroupLabel[]>(\n    'groupLabelList',\n    [\n      { label: '', startRow: 1, endRow: 3 },\n      { label: '', startRow: 4, endRow: 6 },\n    ],\n  );\n  const [configDownloadUrl, setConfigDownloadUrl] = useState('');\n  var dofileDownload = useRef<HTMLAnchorElement>(null);\n\n  const downloadPng = () => {\n    saveSvgAsPng.saveSvgAsPng(\n      document.getElementById('svg-bedsheet'),\n      'bedsheet.png',\n    );\n  };\n\n  useEffect(() => {\n    if (configDownloadUrl !== '') {\n      dofileDownload.current!.click(); // Step 6\n      URL.revokeObjectURL(configDownloadUrl); // Step 7\n      setConfigDownloadUrl('');\n    }\n  }, [configDownloadUrl]);\n\n  const downloadConfig = () => {\n    let output = 'DATA_AREA_ROWS = ' + numOfRows + '\\n';\n    output += 'DATA_AREA_COLUMNS = ' + 24 + '\\n';\n    output += 'ROW_HEIGHT = ' + rowHeight + '\\n';\n    output += 'COLUMN_WIDTH = ' + rowWidth / 24 + '\\n';\n    output +=\n      'INPUT_SECTION_OFFSET_X = ' +\n      (isFirstCol ? firstColWidth + rowHeight : 0) +\n      '\\n';\n    output += 'INPUT_SECTION_OFFSET_Y = ' + (isFirstRow ? rowHeight : 0) + '\\n';\n    output +=\n      'ORIGINAL_WIDTH = ' +\n      (rowWidth + (isFirstCol ? firstColWidth + rowHeight : 0) + 1) +\n      '\\n';\n    output +=\n      'ORIGINAL_HEIGHT = ' +\n      (((isFirstRow ? 1 : 0) + numOfRows) * rowHeight + 1) +\n      '\\n';\n    let pythonList = [...Array(numOfRows)].map(\n      (_, rowIdx) =>\n        \"'\" +\n        (isFirstCol\n          ? firstColLabelList[rowIdx]\n            ? firstColLabelList[rowIdx]\n            : ''\n          : '') +\n        \"'\",\n    );\n    output += 'LABEL_LIST = [' + pythonList + ']\\n';\n    const blob = new Blob([output], { type: 'text/plain;charset=utf-8' }); // Step 3\n    const url = URL.createObjectURL(blob); // Step 4\n    setConfigDownloadUrl(url.toString());\n  };\n\n  return (\n    <Container size=\"xl\">\n      <SettingContainer\n        numOfRows={numOfRows}\n        setNumOfRows={setNumOfRows}\n        isFirstRow={isFirstRow}\n        setIsFirstRow={setIsFirstRow}\n        isFirstCol={isFirstCol}\n        setIsFirstCol={setIsFirstCol}\n        firstColLabelList={firstColLabelList}\n        setFirstColLabelList={setFirstColLabelList}\n        isMidIndex={isMidIndex}\n        setIsMidIndex={setIsMidIndex}\n        isEndIndex={isEndIndex}\n        setIsEndIndex={setIsEndIndex}\n        groupLabelList={groupLabelList}\n        setGroupLabelList={setGroupLabelList}\n        downloadPng={downloadPng}\n        downloadConfig={downloadConfig}\n      />\n      <a\n        style={{ display: 'none' }}\n        download={'config.py'}\n        href={configDownloadUrl}\n        ref={dofileDownload}\n      >\n        download it\n      </a>\n      <SvgContainer\n        numOfRows={numOfRows}\n        isFirstRow={isFirstRow}\n        isFirstCol={isFirstCol}\n        firstColLabelList={firstColLabelList}\n        isMidIndex={isMidIndex}\n        isEndIndex={isEndIndex}\n        groupLabelList={groupLabelList}\n      />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}